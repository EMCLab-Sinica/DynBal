diff --git a/CMSIS/DSP/Include/arm_math.h b/CMSIS/DSP/Include/arm_math.h
index 48bee62..e858f7a 100644
--- a/CMSIS/DSP/Include/arm_math.h
+++ b/CMSIS/DSP/Include/arm_math.h
@@ -340,6 +340,8 @@
 #ifndef _ARM_MATH_H
 #define _ARM_MATH_H
 
+#include "c_callbacks.h"
+
 #ifdef   __cplusplus
 extern "C"
 {
@@ -2581,11 +2583,13 @@ arm_status arm_mat_mult_q15(
    * @return     The function returns either
    * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of size checking.
    */
+struct ParameterInfo;
 arm_status arm_mat_mult_fast_q15(
   const arm_matrix_instance_q15 * pSrcA,
   const arm_matrix_instance_q15 * pSrcB,
         arm_matrix_instance_q15 * pDst,
-        q15_t * pState);
+        q15_t * pState,
+  data_preservation_func data_preserve, struct ParameterInfo *param, uint16_t offset_in_word, size_t values_to_preserve, int16_t offset, int16_t n_keep_state_bits);
 
   /**
    * @brief Q31 matrix multiplication
diff --git a/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c b/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c
index 670ace1..c4998e8 100644
--- a/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c
+++ b/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c
@@ -26,7 +26,37 @@
  * limitations under the License.
  */
 
+#include <stdint.h>
 #include "arm_math.h"
+#include "data.h"
+#ifdef __MSP432__
+#include "Tools/ext_fram/extfram.h"
+
+static uint8_t dma_started;
+static inline void try_invoke_dma(data_preservation_func data_preserve, struct ParameterInfo *param, uint16_t offset_in_word, size_t values_to_preserve, q15_t *pData, uint16_t timer_delay) {
+    if (!dma_started && param) {
+        data_preserve(param, offset_in_word, pData, values_to_preserve * sizeof(int16_t), timer_delay);
+        dma_started = 1;
+    }
+}
+
+#endif
+
+static inline q15_t state_enforcement(q15_t val, uint16_t *cur_state, int16_t *n_keep_state_bits, uint8_t *n_values_before_state) {
+#if STATEFUL
+    if (*n_values_before_state) {
+        (*n_values_before_state)--;
+        return val;
+    }
+    *n_values_before_state = BATCH_SIZE - 1;
+    *cur_state ^= (!*n_keep_state_bits);
+    q15_t ret = (val & 0x7fff) | (*cur_state << 15);
+    *n_keep_state_bits -= BATCH_SIZE;
+    return ret;
+#else
+    return val;
+#endif
+}
 
 /**
   @ingroup groupMatrix
@@ -68,7 +98,8 @@ arm_status arm_mat_mult_fast_q15(
   const arm_matrix_instance_q15 * pSrcA,
   const arm_matrix_instance_q15 * pSrcB,
         arm_matrix_instance_q15 * pDst,
-        q15_t                   * pState)
+        q15_t                   * pState,
+        data_preservation_func data_preserve, struct ParameterInfo *param, uint16_t offset_in_word, size_t values_to_preserve, int16_t offset, int16_t n_keep_state_bits)
 {
         q31_t sum;                                     /* Accumulator */
         q15_t *pSrcBT = pState;                        /* Input data matrix pointer for transpose */
@@ -81,6 +112,9 @@ arm_status arm_mat_mult_fast_q15(
         uint16_t numRowsB = pSrcB->numRows;            /* Number of rows of input matrix A */
         uint32_t col, i = 0U, row = numRowsB, colCnt;  /* Loop counters */
         arm_status status;                             /* Status of matrix multiplication */
+#ifdef __MSP432__
+        uint16_t timer_delay = 50+(numRowsB*13/4)/2;
+#endif
 
 #if defined (ARM_MATH_DSP)
         q31_t in;                                      /* Temporary variable to hold the input value */
@@ -225,6 +259,13 @@ arm_status arm_mat_mult_fast_q15(
     px2 = px + numColsB;
 #endif
 
+#ifdef __MSP432__
+    dma_started = 0;
+#endif
+
+    uint16_t cur_state = (offset < 0);
+    uint8_t n_values_before_state = BATCH_SIZE - 1;
+
     /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
     /* row loop */
     while (row > 0U)
@@ -304,6 +345,10 @@ arm_status arm_mat_mult_fast_q15(
 
           /* Decrement loop counter */
           colCnt--;
+
+#ifdef __MSP432__
+          try_invoke_dma(data_preserve, param, offset_in_word, values_to_preserve, pDst->pData, timer_delay);
+#endif
         }
 
         /* process odd column samples */
@@ -332,7 +377,7 @@ arm_status arm_mat_mult_fast_q15(
 #endif /* #if defined (ARM_MATH_DSP) */
 
         /* Saturate and store result in destination buffer */
-        *px++  = (q15_t) (sum >> 15);
+        *px++  = (q15_t) state_enforcement(sum >> 15, &cur_state, &n_keep_state_bits, &n_values_before_state);
 
 #if defined (ARM_MATH_DSP)
         *px++  = (q15_t) (sum2 >> 15);
@@ -413,6 +458,10 @@ arm_status arm_mat_mult_fast_q15(
 
         /* Decrement row loop counter */
         row--;
+
+#ifdef __MSP432__
+        try_invoke_dma(data_preserve, param, offset_in_word, values_to_preserve, pDst->pData, timer_delay);
+#endif
       }
     }
 
@@ -465,6 +514,10 @@ arm_status arm_mat_mult_fast_q15(
 
         /* Decrement column loop counter */
         col--;
+
+#ifdef __MSP432__
+        try_invoke_dma(data_preserve, param, offset_in_word, values_to_preserve, pDst->pData, timer_delay);
+#endif
       }
     }
 
@@ -474,6 +527,10 @@ arm_status arm_mat_mult_fast_q15(
     status = ARM_MATH_SUCCESS;
   }
 
+#ifdef __MSP432__
+  SPI_WAIT_DMA();
+#endif
+
   /* Return to application */
   return (status);
 }

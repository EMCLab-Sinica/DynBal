diff --git a/CMSIS/DSP/Include/arm_math.h b/CMSIS/DSP/Include/arm_math.h
index 48bee62cd..7bfe9152a 100644
--- a/CMSIS/DSP/Include/arm_math.h
+++ b/CMSIS/DSP/Include/arm_math.h
@@ -2581,11 +2581,13 @@ arm_status arm_mat_mult_q15(
    * @return     The function returns either
    * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of size checking.
    */
+struct ParameterInfo;
 arm_status arm_mat_mult_fast_q15(
   const arm_matrix_instance_q15 * pSrcA,
   const arm_matrix_instance_q15 * pSrcB,
         arm_matrix_instance_q15 * pDst,
-        q15_t * pState);
+        q15_t * pState,
+  struct ParameterInfo *param, uint16_t offset_in_word, size_t values_to_preserve);
 
   /**
    * @brief Q31 matrix multiplication
diff --git a/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c b/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c
index 670ace1f4..6e6df705d 100644
--- a/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c
+++ b/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c
@@ -27,6 +27,20 @@
  */
 
 #include "arm_math.h"
+#ifdef __MSP432__
+#include "platform.h"
+#include <msp.h>
+#include <driverlib.h>
+
+static uint8_t dma_started;
+static inline void try_invoke_dma(struct ParameterInfo *param, uint16_t offset_in_word, size_t values_to_preserve, q15_t *pData, uint16_t timer_delay) {
+    if (!dma_started && param) {
+        my_memcpy_to_param(param, offset_in_word, pData, values_to_preserve * sizeof(int16_t), timer_delay);
+        dma_started = 1;
+    }
+}
+
+#endif
 
 /**
   @ingroup groupMatrix
@@ -68,7 +82,8 @@ arm_status arm_mat_mult_fast_q15(
   const arm_matrix_instance_q15 * pSrcA,
   const arm_matrix_instance_q15 * pSrcB,
         arm_matrix_instance_q15 * pDst,
-        q15_t                   * pState)
+        q15_t                   * pState,
+        struct ParameterInfo *param, uint16_t offset_in_word, size_t values_to_preserve)
 {
         q31_t sum;                                     /* Accumulator */
         q15_t *pSrcBT = pState;                        /* Input data matrix pointer for transpose */
@@ -81,6 +96,9 @@ arm_status arm_mat_mult_fast_q15(
         uint16_t numRowsB = pSrcB->numRows;            /* Number of rows of input matrix A */
         uint32_t col, i = 0U, row = numRowsB, colCnt;  /* Loop counters */
         arm_status status;                             /* Status of matrix multiplication */
+#ifdef __MSP432__
+        uint16_t timer_delay = 50+(numRowsB*13/4)/2;
+#endif
 
 #if defined (ARM_MATH_DSP)
         q31_t in;                                      /* Temporary variable to hold the input value */
@@ -225,6 +243,10 @@ arm_status arm_mat_mult_fast_q15(
     px2 = px + numColsB;
 #endif
 
+#ifdef __MSP432__
+    dma_started = 0;
+#endif
+
     /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
     /* row loop */
     while (row > 0U)
@@ -304,6 +326,10 @@ arm_status arm_mat_mult_fast_q15(
 
           /* Decrement loop counter */
           colCnt--;
+
+#ifdef __MSP432__
+          try_invoke_dma(param, offset_in_word, values_to_preserve, pDst->pData, timer_delay);
+#endif
         }
 
         /* process odd column samples */
@@ -413,6 +439,10 @@ arm_status arm_mat_mult_fast_q15(
 
         /* Decrement row loop counter */
         row--;
+
+#ifdef __MSP432__
+        try_invoke_dma(param, offset_in_word, values_to_preserve, pDst->pData, timer_delay);
+#endif
       }
     }
 
@@ -465,6 +495,10 @@ arm_status arm_mat_mult_fast_q15(
 
         /* Decrement column loop counter */
         col--;
+
+#ifdef __MSP432__
+        try_invoke_dma(param, offset_in_word, values_to_preserve, pDst->pData, timer_delay);
+#endif
       }
     }
 
@@ -474,6 +508,10 @@ arm_status arm_mat_mult_fast_q15(
     status = ARM_MATH_SUCCESS;
   }
 
+#ifdef __MSP432__
+  while (MAP_DMA_isChannelEnabled(3)) {}
+#endif
+
   /* Return to application */
   return (status);
 }
